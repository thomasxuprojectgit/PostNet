
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"reflect"

	"testing"
	"testing/internal/testdeps"


	_test "testing"


	_xtest "testing_test"


)

var tests = []testing.InternalTest{

	{"TestTBHelper", _test.TestTBHelper},

	{"TestTBHelperParallel", _test.TestTBHelperParallel},

	{"TestIsSpace", _test.TestIsSpace},

	{"TestSplitRegexp", _test.TestSplitRegexp},

	{"TestMatcher", _test.TestMatcher},

	{"TestNaming", _test.TestNaming},

	{"TestTestContext", _test.TestTestContext},

	{"TestTRun", _test.TestTRun},

	{"TestBRun", _test.TestBRun},

	{"TestBenchmarkOutput", _test.TestBenchmarkOutput},

	{"TestBenchmarkStartsFrom1", _test.TestBenchmarkStartsFrom1},

	{"TestBenchmarkReadMemStatsBeforeFirstRun", _test.TestBenchmarkReadMemStatsBeforeFirstRun},

	{"TestParallelSub", _test.TestParallelSub},

	{"TestRacyOutput", _test.TestRacyOutput},

	{"TestLogAfterComplete", _test.TestLogAfterComplete},

	{"TestBenchmark", _test.TestBenchmark},

	{"TestCleanup", _test.TestCleanup},

	{"TestConcurrentCleanup", _test.TestConcurrentCleanup},

	{"TestCleanupCalledEvenAfterGoexit", _test.TestCleanupCalledEvenAfterGoexit},

	{"TestRunCleanup", _test.TestRunCleanup},

	{"TestCleanupParallelSubtests", _test.TestCleanupParallelSubtests},

	{"TestNestedCleanup", _test.TestNestedCleanup},

	{"TestAllocsPerRun", _xtest.TestAllocsPerRun},

	{"TestPrettyPrint", _xtest.TestPrettyPrint},

	{"TestResultString", _xtest.TestResultString},

	{"TestRunParallel", _xtest.TestRunParallel},

	{"TestRunParallelFail", _xtest.TestRunParallelFail},

	{"TestRunParallelFatal", _xtest.TestRunParallelFatal},

	{"TestRunParallelSkipNow", _xtest.TestRunParallelSkipNow},

	{"TestReportMetric", _xtest.TestReportMetric},

	{"TestPanic", _xtest.TestPanic},

	{"TestPanicHelper", _xtest.TestPanicHelper},

	{"TestTempDirInCleanup", _xtest.TestTempDirInCleanup},

	{"TestTempDirInBenchmark", _xtest.TestTempDirInBenchmark},

	{"TestTempDir", _xtest.TestTempDir},

	{"TestSetenv", _xtest.TestSetenv},

	{"TestSetenvWithParallelAfterSetenv", _xtest.TestSetenvWithParallelAfterSetenv},

	{"TestSetenvWithParallelBeforeSetenv", _xtest.TestSetenvWithParallelBeforeSetenv},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkTBHelper", _test.BenchmarkTBHelper},

}

var fuzzTargets = []testing.InternalFuzzTarget{

	{"FuzzNaming", _test.FuzzNaming},

}

var examples = []testing.InternalExample{

}

func init() {
	testdeps.ImportPath = "testing"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	_xtest.TestMain(m)
	os.Exit(int(reflect.ValueOf(m).Elem().FieldByName("exitCode").Int()))

}

