
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"


	_test "golang.org/x/sys/unix"


	_xtest "golang.org/x/sys/unix_test"


)

var tests = []testing.InternalTest{

	{"TestNewIfreq", _test.TestNewIfreq},

	{"TestIfreqSize", _test.TestIfreqSize},

	{"TestIfreqName", _test.TestIfreqName},

	{"TestIfreqWithData", _test.TestIfreqWithData},

	{"TestIfreqInet4Addr", _test.TestIfreqInet4Addr},

	{"TestIfreqUint16", _test.TestIfreqUint16},

	{"TestIfreqUint32", _test.TestIfreqUint32},

	{"Test_anyToSockaddr", _test.Test_anyToSockaddr},

	{"TestSockaddrTIPC_sockaddr", _test.TestSockaddrTIPC_sockaddr},

	{"TestSockaddrL2TPIP_sockaddr", _test.TestSockaddrL2TPIP_sockaddr},

	{"TestSockaddrL2TPIP6_sockaddr", _test.TestSockaddrL2TPIP6_sockaddr},

	{"TestSockaddrUnix_sockaddr", _test.TestSockaddrUnix_sockaddr},

	{"TestSockaddrIUCV_sockaddr", _test.TestSockaddrIUCV_sockaddr},

	{"TestSockaddrCAN_sockaddr", _test.TestSockaddrCAN_sockaddr},

	{"TestSockaddrNFC_sockaddr", _test.TestSockaddrNFC_sockaddr},

	{"TestSockaddrNFCLLCP_sockaddr", _test.TestSockaddrNFCLLCP_sockaddr},

	{"TestSockaddrVM_sockaddr", _test.TestSockaddrVM_sockaddr},

	{"TestSCMCredentials", _xtest.TestSCMCredentials},

	{"TestPktInfo", _xtest.TestPktInfo},

	{"TestParseOrigDstAddr", _xtest.TestParseOrigDstAddr},

	{"TestDevices", _xtest.TestDevices},

	{"TestDirent", _xtest.TestDirent},

	{"TestDirentRepeat", _xtest.TestDirentRepeat},

	{"TestFdSet", _xtest.TestFdSet},

	{"TestMmap", _xtest.TestMmap},

	{"TestPipe2", _xtest.TestPipe2},

	{"TestNonblockingPipe2", _xtest.TestNonblockingPipe2},

	{"TestSendfile", _xtest.TestSendfile},

	{"TestIoctlGetEthtoolDrvinfo", _xtest.TestIoctlGetEthtoolDrvinfo},

	{"TestIoctlGetInt", _xtest.TestIoctlGetInt},

	{"TestIoctlRetInt", _xtest.TestIoctlRetInt},

	{"TestIoctlGetRTCTime", _xtest.TestIoctlGetRTCTime},

	{"TestIoctlGetRTCWkAlrm", _xtest.TestIoctlGetRTCWkAlrm},

	{"TestIoctlIfreq", _xtest.TestIoctlIfreq},

	{"TestPidfd", _xtest.TestPidfd},

	{"TestPpoll", _xtest.TestPpoll},

	{"TestTime", _xtest.TestTime},

	{"TestUtime", _xtest.TestUtime},

	{"TestRlimitAs", _xtest.TestRlimitAs},

	{"TestPselect", _xtest.TestPselect},

	{"TestSchedSetaffinity", _xtest.TestSchedSetaffinity},

	{"TestStatx", _xtest.TestStatx},

	{"TestFaccessat", _xtest.TestFaccessat},

	{"TestSyncFileRange", _xtest.TestSyncFileRange},

	{"TestClockNanosleep", _xtest.TestClockNanosleep},

	{"TestOpenByHandleAt", _xtest.TestOpenByHandleAt},

	{"TestEpoll", _xtest.TestEpoll},

	{"TestPrctlRetInt", _xtest.TestPrctlRetInt},

	{"TestTimerfd", _xtest.TestTimerfd},

	{"TestOpenat2", _xtest.TestOpenat2},

	{"TestIoctlFileDedupeRange", _xtest.TestIoctlFileDedupeRange},

	{"TestEnv", _xtest.TestEnv},

	{"TestItoa", _xtest.TestItoa},

	{"TestUname", _xtest.TestUname},

	{"TestStatFieldNames", _xtest.TestStatFieldNames},

	{"TestErrnoSignalName", _xtest.TestErrnoSignalName},

	{"TestSignalNum", _xtest.TestSignalNum},

	{"TestFcntlInt", _xtest.TestFcntlInt},

	{"TestFcntlFlock", _xtest.TestFcntlFlock},

	{"TestPassFD", _xtest.TestPassFD},

	{"TestUnixRightsRoundtrip", _xtest.TestUnixRightsRoundtrip},

	{"TestRlimit", _xtest.TestRlimit},

	{"TestSeekFailure", _xtest.TestSeekFailure},

	{"TestSetsockoptString", _xtest.TestSetsockoptString},

	{"TestDup", _xtest.TestDup},

	{"TestPoll", _xtest.TestPoll},

	{"TestSelect", _xtest.TestSelect},

	{"TestGetwd", _xtest.TestGetwd},

	{"TestFstatat", _xtest.TestFstatat},

	{"TestFchmodat", _xtest.TestFchmodat},

	{"TestMkdev", _xtest.TestMkdev},

	{"TestPipe", _xtest.TestPipe},

	{"TestRenameat", _xtest.TestRenameat},

	{"TestUtimesNanoAt", _xtest.TestUtimesNanoAt},

	{"TestSend", _xtest.TestSend},

	{"TestSendmsgBuffers", _xtest.TestSendmsgBuffers},

	{"TestSysvSharedMemory", _xtest.TestSysvSharedMemory},

	{"TestTimeToTimespec", _xtest.TestTimeToTimespec},

	{"TestXattr", _xtest.TestXattr},

	{"TestFdXattr", _xtest.TestFdXattr},

}

var benchmarks = []testing.InternalBenchmark{

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {
	testdeps.ImportPath = "golang.org/x/sys/unix"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

